<?xml version="1.0"?>
<ruleset name="chw's custom rules" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

	<description>Christian Wulf's custom rules</description>

	<rule class="de.chw.MissingPluralVariableName" name="MissingPluralVariableName"
		message="The variable {0} is not named in plural although its type {1} represents a collection.">
		<description>
			A variable that represents a collection (incl. set and list) should be named in plural form.
		</description>

		<priority>1</priority>

		<example>
<![CDATA[
    List<Stage> stages;
    Collection<String> words;
]]>
		</example>
	</rule>

	<rule class="de.chw.MissingUnitSuffix" name="MissingUnitSuffix"
		message="The variable {0} does not encode the unit in its name although it represents a physical variable.">
		<description>
			A variable that represents a physical variable should also encode the unit in its name.
		</description>
		<priority>1</priority>

		<example>
<![CDATA[
	durationInSec
	distanceInKm
]]>
		</example>
	</rule>

	<rule class="de.chw.NoEmptyLineAfterMethodHeader" name="NoEmptyLineAfterMethodHeader"
		message="The body of the method declaration {0} starts with an empty line although it must directly begin with its first statement.">
		<description>
			The body of a method declaration must start with a statement, not an empty line.
		</description>
		<priority>1</priority>

		<example>
<![CDATA[
	wrong:
	
	public int size() {

		return size;
	}
	
	right:
	
	public int size() {
		return size;
	}
]]>
		</example>
	</rule>

	<rule class="de.chw.TypeJavadocShouldStartWith" name="TypeJavadocShouldStartWith"
		message="The Javadoc of the type {0} does not start with {1}, but with {2}.">
		<description>
			The Javadoc of a type should always start with the given characters.
		</description>
		<priority>2</priority>

		<properties>
			<property name="firstCharacters" value="Represents " />
		</properties>

		<example>
<![CDATA[
	<properties>
		<property name="firstCharacters" value="Represents " />
	</properties>
	
	/** Represents a complex number. */
	class ComplexNumber { ... }
]]>
		</example>
	</rule>

	<rule class="de.chw.NonHeaderCommentSize" name="NonHeaderCommentSize"
		message="Comment is too large">
		<description>
Determines whether the dimensions of non-header comments found are within the specified limits.
    </description>
		<priority>3</priority>
		<example>
<![CDATA[
/**
*
*	too many lines!
*
*
*
*
*
*
*
*
*
*
*
*
*/
]]>
    </example>
	</rule>

	<rule class="de.chw.UnitTestMayNotExtendAnything" name="UnitTestMayNotExtendAnything"
		message="Illegal test class declaration: the test class {0} inherits from another class, namely {1}.">
		<description>
			A JUnit test may not extend any common test class such that the actual test methods (@Before, @Test, @After, ...) are encapsulated by the super class.
			Instead, a test should describe the reader in a declarative way what it tests.
			If some tests have some behavior in common, move it into a utility class and invoke it in each of these tests. 
		</description>
		<priority>1</priority>

		<example>
<![CDATA[
	wrong:
	
	class FooTest extends AbstractTemplateTest { 
	
		// @Before and @Test are predefined in the super class
	
		@Override
		protected List<String> provideInput() {
			...
		}
	
	}
	
	right:
	
	class FooTest {

		@Before
		public void before() {
			...
		}
		
		@Test
		public void testSomething() {
			...
		}
	}
]]>
		</example>
	</rule>

	<rule class="de.chw.DisallowRawTypeDeclaration" name="DisallowRawTypeDeclaration"
		message="Illegal raw type usage in the {0} declaration from Line {1} to {2}.">
		<description>
			Raw types can lead to runtime errors. Using type parameters (a.k.a. Generics) instead allows the compiler to identify type errors at compile-time.
		</description>
		<priority>2</priority>

		<example>
<![CDATA[
	wrong:
	
	public class RawTypeDeclaration {
	
		List numbers;
	
		public void testMe(List words) throws Exception {
			List elements = new ArrayList();
		}
	
	}

	right:

	public class GenericTypeDeclaration {
	
		List<Integer> numbers;
	
		public void testMe(List<String> words) throws Exception {
			List<String> elements = new ArrayList<String>();
		}

		public void testDiamond() throws Exception {
			List<String> elements = new ArrayList<>();
		}
	
	}
]]>
		</example>
	</rule>

</ruleset>